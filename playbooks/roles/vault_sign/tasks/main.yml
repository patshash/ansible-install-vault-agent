---
# roles/vault_sign/tasks/main.yml

# Ensure Vault CA certificate is installed
- name: Check if Vault CA certificate exists
  ansible.builtin.stat:
    path: /etc/pki/ca-trust/source/anchors/vault-ca.crt
  register: ca_stat

- name: Fail if Vault CA certificate is missing
  ansible.builtin.fail:
    msg: "Vault CA certificate not found in /etc/pki/ca-trust/source/anchors"
  when: not ca_stat.stat.exists

# Install pip-system-certs to handle SSL cert verification issues
- name: Install pip-system-certs to resolve SSL certificate issues
  ansible.builtin.pip:
    name: pip-system-certs
    executable: /usr/bin/pip3

# Debug: Check certificate trust
- name: Check if the Vault CA is in the trust store
  ansible.builtin.command: update-ca-trust list
  register: ca_trust_check
  changed_when: false
  failed_when: false

- name: Display Vault CA trust status
  debug:
    msg: "Vault CA trust store: {{ ca_trust_check.stdout }}"

# Test Vault connectivity
- name: Test Vault connectivity
  ansible.builtin.uri:
    url: "{{ vault_addr }}/v1/sys/health"
    method: GET
    return_content: true
    validate_certs: true
    ca_path: "/etc/pki/ca-trust/source/anchors/"  # Specify the directory where Vault CA cert is stored
  register: vault_health
  retries: 3
  delay: 5
  timeout: 10

- name: Display vault_health response for debugging
  debug:
    var: vault_health

- name: Fail if Vault is unreachable
  ansible.builtin.fail:
    msg: "Unable to reach Vault at {{ vault_addr }}"
  when: vault_health.status != 200

# Check if hvac Python library is installed
- name: Check if hvac Python library is installed
  ansible.builtin.command:
    cmd: "/usr/bin/python3 -c 'import hvac'"
  register: hvac_check
  failed_when: hvac_check.rc != 0
  changed_when: false

- name: Fail if hvac library is not installed
  ansible.builtin.fail:
    msg: "hvac library is not installed in the Execution Environment."
  when: hvac_check.rc != 0

# Ensure VAULT_ADDR environment variable is set
- name: Ensure VAULT_ADDR environment variable is set
  ansible.builtin.assert:
    that:
      - vault_addr is defined
      - vault_addr | length > 0
    fail_msg: "VAULT_ADDR is not set or is empty!"

# Ensure Vault authentication credentials are defined
- name: Ensure Vault authentication credentials are defined
  ansible.builtin.assert:
    that:
      - vault_approle_role_id is defined
      - vault_approle_secret_id is defined
    fail_msg: "Vault AppRole authentication credentials (role_id or secret_id) are not set!"

# Check if Vault AppRole exists
- name: Check if Vault AppRole exists
  community.hashi_vault.vault_read:
    url: "{{ vault_addr }}"
    path: "auth/approle/role/{{ vault_pki_role }}"
  register: role_check
  failed_when: role_check.status != 200
  retries: 3
  delay: 5
  timeout: 10

- name: Fail if Vault AppRole does not exist
  ansible.builtin.fail:
    msg: "Vault AppRole {{ vault_pki_role }} does not exist!"
  when: role_check.status != 200

# Authenticate to Vault and Sign CSR (via Execution Environment)
- name: Authenticate to Vault and Sign CSR
  community.hashi_vault.vault_write:
    url: "{{ vault_addr }}"
    path: "pki/sign/{{ vault_pki_role }}"
    data:
      csr: "{{ remote_csr_data.content | b64decode }}"
      common_name: "{{ inventory_hostname }}.{{ domain }}"
      ttl: "720h"
    auth_method: approle
    role_id: "{{ vault_approle_role_id }}"
    secret_id: "{{ vault_approle_secret_id }}"
    validate_certs: false
  register: signed_cert

# Write signed certificate to the VM
- name: Write signed certificate to file
  ansible.builtin.copy:
    content: "{{ signed_cert.data.certificate }}"
    dest: "/etc/vault.d/cert.pem"
    mode: "0644"
